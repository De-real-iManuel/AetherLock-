import request from 'supertest'
import app from '../src/index.js'
import { generateEvidenceHash, signVerificationPayload, createVerificationPayload } from '../src/utils/crypto.js'
import { initializeKeyPair } from '../src/routes/keys.js'\n\ndescribe('AI Agent Service', () => {\n  let server;\n  let keyPair;\n\n  beforeAll(async () => {\n    // Initialize key pair for testing\n    keyPair = initializeKeyPair();\n    \n    // Start server\n    server = app.listen(0); // Use random port\n  });\n\n  afterAll(async () => {\n    if (server) {\n      await new Promise((resolve) => server.close(resolve));\n    }\n  });\n\n  describe('Health Check', () => {\n    it('should return healthy status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        status: 'healthy',\n        service: 'AetherLock AI Agent'\n      });\n      expect(response.body.timestamp).toBeDefined();\n    });\n  });\n\n  describe('Key Management', () => {\n    it('should return AI agent public key', async () => {\n      const response = await request(app)\n        .get('/api/keys/public')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          public_key: expect.any(String),\n          key_format: 'base58',\n          algorithm: 'Ed25519'\n        }\n      });\n      \n      // Verify key format\n      expect(response.body.data.public_key).toMatch(/^[1-9A-HJ-NP-Za-km-z]+$/);\n    });\n\n    it('should generate consistent public key across requests', async () => {\n      const response1 = await request(app).get('/api/keys/public');\n      const response2 = await request(app).get('/api/keys/public');\n\n      expect(response1.body.data.public_key).toBe(response2.body.data.public_key);\n    });\n  });\n\n  describe('Evidence Upload', () => {\n    it('should upload evidence files to IPFS', async () => {\n      const testFile = Buffer.from('Test evidence content');\n      const escrowId = 'test_escrow_' + Date.now();\n\n      const response = await request(app)\n        .post('/api/evidence/upload')\n        .field('escrow_id', escrowId)\n        .field('description', 'Test evidence file')\n        .attach('evidence', testFile, 'test.txt')\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          escrow_id: escrowId,\n          ipfs_cid: expect.any(String),\n          evidence_hash: expect.any(String),\n          files: expect.arrayContaining([\n            expect.objectContaining({\n              filename: 'test.txt',\n              type: 'text/plain',\n              hash: expect.any(String),\n              ipfs_url: expect.any(String)\n            })\n          ])\n        }\n      });\n    });\n\n    it('should reject upload without escrow_id', async () => {\n      const testFile = Buffer.from('Test content');\n\n      const response = await request(app)\n        .post('/api/evidence/upload')\n        .attach('evidence', testFile, 'test.txt')\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          message: 'Missing required field: escrow_id',\n          code: 'MISSING_ESCROW_ID'\n        }\n      });\n    });\n\n    it('should reject upload without files', async () => {\n      const response = await request(app)\n        .post('/api/evidence/upload')\n        .field('escrow_id', 'test_escrow')\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          message: 'No files provided for upload',\n          code: 'NO_FILES_PROVIDED'\n        }\n      });\n    });\n\n    it('should handle multiple file uploads', async () => {\n      const file1 = Buffer.from('First test file');\n      const file2 = Buffer.from('Second test file');\n      const escrowId = 'multi_test_' + Date.now();\n\n      const response = await request(app)\n        .post('/api/evidence/upload')\n        .field('escrow_id', escrowId)\n        .attach('evidence', file1, 'file1.txt')\n        .attach('evidence', file2, 'file2.txt')\n        .expect(200);\n\n      expect(response.body.data.files).toHaveLength(2);\n      expect(response.body.data.files[0].filename).toBe('file1.txt');\n      expect(response.body.data.files[1].filename).toBe('file2.txt');\n    });\n  });\n\n  describe('Evidence Hash Generation', () => {\n    it('should generate evidence hash for data', async () => {\n      const testData = { test: 'data', timestamp: Date.now() };\n\n      const response = await request(app)\n        .post('/api/evidence/hash')\n        .send({ data: testData })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          input_data: testData,\n          evidence_hash: expect.any(String),\n          algorithm: 'SHA-256'\n        }\n      });\n\n      // Verify hash format (64 hex characters)\n      expect(response.body.data.evidence_hash).toMatch(/^[a-f0-9]{64}$/);\n    });\n\n    it('should generate consistent hashes for same data', async () => {\n      const testData = { consistent: 'test' };\n\n      const response1 = await request(app)\n        .post('/api/evidence/hash')\n        .send({ data: testData });\n\n      const response2 = await request(app)\n        .post('/api/evidence/hash')\n        .send({ data: testData });\n\n      expect(response1.body.data.evidence_hash).toBe(response2.body.data.evidence_hash);\n    });\n  });\n\n  describe('AI Verification', () => {\n    const mockEscrowId = 'test_escrow_verification';\n    const mockTaskDescription = 'Create a React component with TypeScript that displays user profile information';\n    const mockEvidence = [\n      {\n        filename: 'UserProfile.tsx',\n        type: 'text/plain',\n        size: 1024,\n        hash: generateEvidenceHash('mock file content'),\n        description: 'React TypeScript component file'\n      },\n      {\n        filename: 'screenshot.png',\n        type: 'image/png',\n        size: 2048,\n        hash: generateEvidenceHash('mock image content'),\n        description: 'Screenshot of working component'\n      }\n    ];\n\n    it('should process verification request with valid evidence', async () => {\n      const response = await request(app)\n        .post('/api/verification/verify')\n        .send({\n          escrow_id: mockEscrowId,\n          task_description: mockTaskDescription,\n          evidence: mockEvidence\n        })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          verification: {\n            escrow_id: mockEscrowId,\n            result: expect.any(Boolean),\n            evidence_hash: expect.any(String),\n            confidence_score: expect.any(Number),\n            timestamp: expect.any(Number)\n          },\n          signature: expect.any(String),\n          message: expect.any(String),\n          ai_analysis: {\n            explanation: expect.any(String),\n            model_used: expect.any(String)\n          }\n        }\n      });\n\n      // Verify confidence score is between 0 and 1\n      expect(response.body.data.verification.confidence_score).toBeGreaterThanOrEqual(0);\n      expect(response.body.data.verification.confidence_score).toBeLessThanOrEqual(1);\n    });\n\n    it('should reject verification without required fields', async () => {\n      const response = await request(app)\n        .post('/api/verification/verify')\n        .send({\n          evidence: mockEvidence\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          message: 'Missing required fields: escrow_id and task_description',\n          code: 'MISSING_REQUIRED_FIELDS'\n        }\n      });\n    });\n\n    it('should handle verification with no evidence', async () => {\n      const response = await request(app)\n        .post('/api/verification/verify')\n        .send({\n          escrow_id: mockEscrowId,\n          task_description: mockTaskDescription,\n          evidence: []\n        })\n        .expect(200);\n\n      // Should still process but likely return low confidence\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.verification.confidence_score).toBeLessThan(0.5);\n    });\n\n    it('should generate valid signature for verification result', async () => {\n      const response = await request(app)\n        .post('/api/verification/verify')\n        .send({\n          escrow_id: mockEscrowId,\n          task_description: mockTaskDescription,\n          evidence: mockEvidence\n        });\n\n      const { signature, message } = response.body.data;\n      \n      // Verify signature format (128 hex characters for Ed25519)\n      expect(signature).toMatch(/^[a-f0-9]{128}$/);\n      \n      // Verify message format (hex encoded)\n      expect(message).toMatch(/^[a-f0-9]+$/);\n    });\n  });\n\n  describe('Mock Verification (Development)', () => {\n    it('should provide mock verification in development', async () => {\n      const mockEscrowId = 'mock_test_' + Date.now();\n\n      const response = await request(app)\n        .post('/api/verification/mock')\n        .send({\n          escrow_id: mockEscrowId,\n          result: true,\n          confidence: 0.95\n        })\n        .expect(200);\n\n      expect(response.body).toMatchObject({\n        success: true,\n        data: {\n          verification: {\n            escrow_id: mockEscrowId,\n            result: true,\n            confidence: 0.95\n          },\n          signature: expect.any(String),\n          mock: true\n        }\n      });\n    });\n\n    it('should reject mock verification without escrow_id', async () => {\n      const response = await request(app)\n        .post('/api/verification/mock')\n        .send({\n          result: true\n        })\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'MISSING_ESCROW_ID'\n        }\n      });\n    });\n  });\n\n  describe('Signature Verification Workflow', () => {\n    it('should create verifiable signature payload', () => {\n      const escrowId = 'test_signature_workflow';\n      const result = true;\n      const evidenceHash = generateEvidenceHash('test evidence');\n      const confidence = 0.85;\n\n      // Create verification payload\n      const payload = createVerificationPayload(escrowId, result, evidenceHash, confidence);\n      \n      expect(payload).toMatchObject({\n        escrow_id: escrowId,\n        result,\n        evidence_hash: evidenceHash,\n        confidence,\n        timestamp: expect.any(Number),\n        agent_version: expect.any(String)\n      });\n\n      // Sign the payload\n      const signed = signVerificationPayload(payload, keyPair.secretKey);\n      \n      expect(signed).toMatchObject({\n        signature: expect.any(String),\n        message: expect.any(String),\n        messageHash: expect.any(String)\n      });\n\n      // Verify signature format\n      expect(signed.signature).toMatch(/^[a-f0-9]{128}$/);\n    });\n\n    it('should generate different signatures for different payloads', () => {\n      const payload1 = createVerificationPayload('escrow1', true, 'hash1', 0.9);\n      const payload2 = createVerificationPayload('escrow2', false, 'hash2', 0.1);\n\n      const signed1 = signVerificationPayload(payload1, keyPair.secretKey);\n      const signed2 = signVerificationPayload(payload2, keyPair.secretKey);\n\n      expect(signed1.signature).not.toBe(signed2.signature);\n      expect(signed1.messageHash).not.toBe(signed2.messageHash);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should handle invalid routes gracefully', async () => {\n      const response = await request(app)\n        .get('/api/nonexistent')\n        .expect(404);\n\n      expect(response.body).toMatchObject({\n        error: {\n          message: 'Endpoint not found',\n          status: 404\n        }\n      });\n    });\n\n    it('should handle malformed JSON requests', async () => {\n      const response = await request(app)\n        .post('/api/verification/verify')\n        .set('Content-Type', 'application/json')\n        .send('{ invalid json }')\n        .expect(400);\n\n      expect(response.body.error).toBeDefined();\n    });\n\n    it('should handle large file uploads gracefully', async () => {\n      const largeFile = Buffer.alloc(15 * 1024 * 1024); // 15MB file (over 10MB limit)\n\n      const response = await request(app)\n        .post('/api/evidence/upload')\n        .field('escrow_id', 'large_file_test')\n        .attach('evidence', largeFile, 'large.bin')\n        .expect(400);\n\n      expect(response.body).toMatchObject({\n        success: false,\n        error: {\n          code: 'FILE_TOO_LARGE'\n        }\n      });\n    });\n  });\n\n  describe('Performance Tests', () => {\n    it('should handle concurrent verification requests', async () => {\n      const requests = Array.from({ length: 5 }, (_, i) => \n        request(app)\n          .post('/api/verification/verify')\n          .send({\n            escrow_id: `concurrent_test_${i}`,\n            task_description: 'Test concurrent processing',\n            evidence: [{\n              filename: `test${i}.txt`,\n              type: 'text/plain',\n              size: 100,\n              hash: generateEvidenceHash(`content${i}`)\n            }]\n          })\n      );\n\n      const responses = await Promise.all(requests);\n      \n      // All requests should succeed\n      responses.forEach(response => {\n        expect(response.status).toBe(200);\n        expect(response.body.success).toBe(true);\n      });\n    });\n\n    it('should respond to health check quickly', async () => {\n      const start = Date.now();\n      \n      await request(app)\n        .get('/health')\n        .expect(200);\n      \n      const duration = Date.now() - start;\n      expect(duration).toBeLessThan(100); // Should respond within 100ms\n    });\n  });\n\n  describe('Integration Tests', () => {\n    it('should complete full evidence upload and verification workflow', async () => {\n      const escrowId = 'integration_test_' + Date.now();\n      const testFile = Buffer.from('Integration test evidence content');\n\n      // Step 1: Upload evidence\n      const uploadResponse = await request(app)\n        .post('/api/evidence/upload')\n        .field('escrow_id', escrowId)\n        .field('description', 'Integration test evidence')\n        .attach('evidence', testFile, 'integration.txt')\n        .expect(200);\n\n      const { evidence_hash, files } = uploadResponse.body.data;\n\n      // Step 2: Verify task completion\n      const verificationResponse = await request(app)\n        .post('/api/verification/verify')\n        .send({\n          escrow_id: escrowId,\n          task_description: 'Integration test task',\n          evidence: files\n        })\n        .expect(200);\n\n      // Verify the workflow completed successfully\n      expect(verificationResponse.body.data.verification.escrow_id).toBe(escrowId);\n      expect(verificationResponse.body.data.verification.evidence_hash).toBeDefined();\n      expect(verificationResponse.body.data.signature).toBeDefined();\n    });\n  });\n});